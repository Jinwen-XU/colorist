% \iffalse meta-comment
%
% Copyright (C) 2021-2022 by Jinwen XU
% ------------------------------------
%
% This file may be distributed and/or modified under the conditions of the LaTeX
% Project Public License, either version 1.3c of this license or (at your option)
% any later version. The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% \fi
%
%<*driver>
\ProvidesFile{colorist.dtx}
%</driver>
\NeedsTeXFormat{LaTeX2e}[2020-10-01]
\RequirePackage{l3keys2e}
%
%<*colorart>
\ProvidesExplClass
  {colorart}
  {2022/03/17} {}
  {A colorful article style}

\tl_const:Nn \l__colorclass_base_class_tl { article }
%</colorart>
%
%<*colorbook>
\ProvidesExplClass
  {colorbook}
  {2022/03/17} {}
  {A colorful book style}

\tl_const:Nn \l__colorclass_base_class_tl { book }
%</colorbook>
%
%<*lebhart>
\ProvidesExplClass
  {lebhart}
  {2022/03/17} {}
  {A colorful article style}

\tl_const:Nn \l__colorclass_base_class_tl { article }
%</lebhart>
%
%<*beaulivre>
\ProvidesExplClass
  {beaulivre}
  {2022/03/17} {}
  {A colorful book style}

\tl_const:Nn \l__colorclass_base_class_tl { book }
%</beaulivre>
%
%<*colorist>
\ProvidesExplPackage
  {colorist}
  {2022/03/17} {}
  {A colorful style for articles and books}
%</colorist>
%
%<*colorist-fancy>
\ProvidesExplPackage
  {colorist-fancy}
  {2022/03/17} {}
  {The fancy style of colorist}
%</colorist-fancy>

%<*class>

\bool_new:N \l__colorclass_load_custom_font_file_bool
\bool_set_false:N \l__colorclass_load_custom_font_file_bool

%<*lebhart|beaulivre>
\bool_new:N \l__colorclass_load_custom_font_file_latin_bool
\bool_set_false:N \l__colorclass_load_custom_font_file_latin_bool

\bool_new:N \l__colorclass_load_custom_font_file_cjk_bool
\bool_set_false:N \l__colorclass_load_custom_font_file_cjk_bool

\bool_new:N \l__colorclass_load_custom_font_file_math_bool
\bool_set_false:N \l__colorclass_load_custom_font_file_math_bool
%</lebhart|beaulivre>

\keys_define:nn { colorclass }
  {
    , draft                   .bool_set:N         = \l__colorclass_fast_bool
    , draft                   .initial:n          = { false }
    , fast                    .bool_set:N         = \l__colorclass_fast_bool

%<*none>
    , fancy                   .bool_set:N         = \l__colorclass_fancy_bool
    , fancy                   .initial:n          = { false }
%</none>

    , load custom font file   .code:n             = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_str { #1 }
%<*lebhart|beaulivre>
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_latin_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_latin_str { colorist.font.latin }
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_cjk_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_cjk_str   { colorist.font.cjk }
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_math_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_math_str  { colorist.font.math }
%</lebhart|beaulivre>
                                                    }
    , load custom font file   .default:n          = { colorist.font }
    , load~custom~font~file   .code:n             = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_str { #1 }
                                                    }
    , load~custom~font~file   .default:n          = { colorist.font }
    , load-custom-font-file   .code:n             = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_str { #1 }
                                                    }
    , load-custom-font-file   .default:n          = { colorist.font }

%<*lebhart|beaulivre>
    , load custom latin font file   .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_latin_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_latin_str { #1 }
                                                    }
    , load custom latin font file   .default:n    = { colorist.font.latin }
    , load~custom~latin~font~file   .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_latin_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_latin_str { #1 }
                                                    }
    , load~custom~latin~font~file   .default:n    = { colorist.font.latin }
    , load-custom-latin-font-file   .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_latin_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_latin_str { #1 }
                                                    }
    , load-custom-latin-font-file   .default:n    = { colorist.font.latin }

    , load custom cjk font file     .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_cjk_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_cjk_str { #1 }
                                                    }
    , load custom cjk font file     .default:n    = { colorist.font.cjk }
    , load~custom~cjk~font~file     .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_cjk_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_cjk_str { #1 }
                                                    }
    , load~custom~cjk~font~file     .default:n    = { colorist.font.cjk }
    , load-custom-cjk-font-file     .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_cjk_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_cjk_str { #1 }
                                                    }
    , load-custom-cjk-font-file     .default:n    = { colorist.font.cjk }

    , load custom math font file    .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_math_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_math_str { #1 }
                                                    }
    , load custom math font file    .default:n    = { colorist.font.math }
    , load~custom~math~font~file    .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_math_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_math_str { #1 }
                                                    }
    , load~custom~math~font~file    .default:n    = { colorist.font.math }
    , load-custom-math-font-file    .code:n       = {
                                                      \bool_set_true:N \l__colorclass_load_custom_font_file_math_bool
                                                      \str_set:Nn \l__colorclass_custom_font_file_math_str { #1 }
                                                    }
    , load-custom-math-font-file    .default:n    = { colorist.font.math }
%</lebhart|beaulivre>

    , a4paper                 .bool_set:N         = \l__colorclass_a_four_paper_bool
    , a4paper                 .initial:n          = { false }
    , b5paper                 .bool_set:N         = \l__colorclass_b_five_paper_bool
    , b5paper                 .initial:n          = { false }

    , 11pt                    .code:n             = { \PassOptionsToClass { \CurrentOption } { \l__colorclass_base_class_tl } }
    , 12pt                    .code:n             = { \PassOptionsToClass { \CurrentOption } { \l__colorclass_base_class_tl } }

    , unknown                 .code:n             = {
                                                      \PassOptionsToPackage { \CurrentOption } { colorist }
                                                    }
  }
\ProcessKeysOptions { colorclass }

\LoadClass{\l__colorclass_base_class_tl}


%%================================
%%  Page layout
%%================================
\RequirePackage { silence }
\WarningFilter { geometry } { Over-specification }

\PassOptionsToPackage { heightrounded } { geometry }
\RequirePackage { geometry }

\geometry
  {
    papersize = { 8.5in, 11in },
    total = { 6.500in, 9.130in },
    centering,
    footnotesep = 2em plus 2pt minus 2pt,
  }

\bool_if:NT \l__colorclass_b_five_paper_bool
  {
    \geometry
      {
        b5paper,
        total = { 5.535in, 8.160in },
        centering,
        footnotesep = 2em plus 2pt minus 2pt,
      }
  }

\bool_if:NT \l__colorclass_a_four_paper_bool
  {
    \geometry
      {
        a4paper,
        total = { 6.500in, 9.685in },
        centering,
        footnotesep = 2em plus 2pt minus 2pt,
      }
  }

\bool_if:NT \l__colorclass_fast_bool
  {
    \PassOptionsToPackage { fast } { colorist }
    \RequirePackage { draftwatermark }
    \DraftwatermarkOptions { text = { \normalfont DRAFT }, color = paper!97!-paper }
  }

\RequirePackage { indentfirst }

\RequirePackage { colorist }

%%================================
%%  Fonts
%%================================
\WarningFilter { latexfont } { Font~shape }
\WarningFilter { latexfont } { Some~font  }

\cs_new_protected:Nn \__colorclass_load_file_or_config:Nnn
  {
    \bool_if:NT #1
      {
        \exp_args:Nx \file_if_exist:nT { #2 }
          {
            \exp_args:Nx \file_input:n { #2 }
            \use_none:nn
          }
      }
    \use:n { #3 }
  }

%<*lebhart|beaulivre>
\cs_new_protected:Nn \__colorclass_if_font_exist:nnn
  {
    \bool_if:NTF \l__colorclass_fast_bool
      { #3 }
      { \fontspec_font_if_exist:nTF { #1 } { #2 } { #3 } }
  }
%</lebhart|beaulivre>

\__colorclass_load_file_or_config:Nnn \l__colorclass_load_custom_font_file_bool { \l__colorclass_custom_font_file_str }
  {
    \RequirePackage { projlib-font }

%<*colorart|colorbook>
    \bool_if:NF \g_projlib_font_already_set_bool
      {
        \RequirePackage { mathpazo }
        \RequirePackage { newpxtext }
        \RequirePackage { amssymb }
      }
%</colorart|colorbook>
%
%<*lebhart|beaulivre>
    \bool_if:NF \g_projlib_font_already_set_bool
      {
        \bool_if:NT \l__colorclass_fast_bool
          {
            \RequirePackage { mathpazo }
          }

        \PassOptionsToPackage { no-math,quiet } { fontspec }
        \RequirePackage { fontspec }

        \__colorclass_load_file_or_config:Nnn \l__colorclass_load_custom_font_file_latin_bool { \l__colorclass_custom_font_file_latin_str }
          {
            \__colorclass_if_font_exist:nnn { Palatino~Linotype }
              {
                \bool_if:NTF \l__projlib_font_useosf_bool
                  {
                    \setmainfont { Palatino~Linotype } [ Numbers = OldStyle ]
                  }
                  {
                    \setmainfont { Palatino~Linotype }
                  }
              }
              {
                \bool_if:NTF \l__projlib_font_useosf_bool
                  {
                    \setmainfont { TeXGyrePagellaX-Regular.otf }
                      [
                        BoldFont       = TeXGyrePagellaX-Bold.otf ,
                        ItalicFont     = TeXGyrePagellaX-Italic.otf ,
                        BoldItalicFont = TeXGyrePagellaX-BoldItalic.otf ,
                        Numbers        = OldStyle ,
                      ]
                  }
                  {
                    \setmainfont { TeXGyrePagellaX-Regular.otf }
                      [
                        BoldFont       = TeXGyrePagellaX-Bold.otf ,
                        ItalicFont     = TeXGyrePagellaX-Italic.otf ,
                        BoldItalicFont = TeXGyrePagellaX-BoldItalic.otf ,
                      ]
                  }
              }
            \setsansfont { SourceSansPro-Regular.otf }
              [
                Scale          = MatchLowercase ,
                BoldFont       = SourceSansPro-Bold.otf ,
                ItalicFont     = SourceSansPro-RegularIt.otf ,
                BoldItalicFont = SourceSansPro-BoldIt.otf ,
              ]
            \setmonofont { NewCMMono10-Regular.otf }
              [
                Scale          = 1.05 ,
                BoldFont       = NewCMMono10-Bold.otf ,
                ItalicFont     = NewCMMono10-Italic.otf ,
                BoldItalicFont = NewCMMono10-BoldOblique.otf ,
              ]

            \projlib_language_set_linespacing_latin:n { \setstretch { 1.07 } }
          }
      }


    \PassOptionsToPackage { fontset = none, scheme = plain } { ctex }
    \RequirePackage { ctex }


    \__colorclass_load_file_or_config:Nnn \l__colorclass_load_custom_font_file_cjk_bool { \l__colorclass_custom_font_file_cjk_str }
      {
        \__colorclass_if_font_exist:nnn { SourceHanSerifSC-Regular }
          {
            \setCJKmainfont { SourceHanSerifSC-Regular }
              [
                BoldFont       = SourceHanSerifSC-Bold ,
                ItalicFont     = * ,
                BoldItalicFont = SourceHanSerifSC-Bold ,
              ]
          }
          {
            \setCJKmainfont { FandolSong-Regular.otf }
              [
                BoldFont       = FandolSong-Bold.otf ,
                ItalicFont     = FandolKai-Regular.otf ,
                BoldItalicFont = FandolKai-Regular.otf ,
                BoldItalicFeatures = { FakeBold = 4 } ,
              ]
          }

        \__colorclass_if_font_exist:nnn { SourceHanSansSC-Regular }
          {
            \setCJKsansfont{SourceHanSansSC-Regular}
              [
                BoldFont       = SourceHanSansSC-Bold ,
                ItalicFont     = * ,
                BoldItalicFont = SourceHanSansSC-Bold ,
              ]
          }
          {
            \setCJKsansfont { FandolHei-Regular.otf }
              [
                BoldFont       = FandolHei-Bold.otf ,
                ItalicFont     = * ,
                BoldItalicFont = FandolHei-Bold.otf ,
              ]
          }

        \__colorclass_if_font_exist:nnn { SourceHanMonoSC-Regular }
          {
            \setCJKmonofont { SourceHanMonoSC-Regular }
              [
                BoldFont       = SourceHanMonoSC-Medium ,
                ItalicFont     = * ,
                BoldItalicFont = SourceHanMonoSC-Medium ,
              ]
          }
          {
            \setCJKmonofont { FandolFang-Regular.otf }
              [
                BoldFont       = * ,
                BoldFeatures   = { FakeBold = 4 } ,
                ItalicFont     = * ,
                BoldItalicFont = * ,
                BoldItalicFeatures = { FakeBold = 4 } ,
              ]
          }

        \bool_if:NT \g__projlib_language_enabled_schinese_bool
          {
            \__colorclass_if_font_exist:nnn { SourceHanSerifSC-Regular }
              {
                \setCJKfamilyfont { SCmain } { SourceHanSerifSC-Regular }
                  [
                    BoldFont       = SourceHanSerifSC-Bold ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanSerifSC-Bold ,
                  ]
              }
              {
                \setCJKfamilyfont { SCmain } { FandolSong-Regular.otf }
                  [
                    BoldFont       = FandolSong-Bold.otf ,
                    ItalicFont     = FandolKai-Regular.otf ,
                    BoldItalicFont = FandolKai-Regular.otf ,
                    BoldItalicFeatures = { FakeBold = 4 } ,
                  ]
              }
            \__colorclass_if_font_exist:nnn { SourceHanSansSC-Regular }
              {
                \setCJKfamilyfont { SCsans } { SourceHanSansSC-Regular }
                  [
                    BoldFont       = SourceHanSansSC-Bold ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanSansSC-Bold ,
                  ]
              }
              {
                \setCJKfamilyfont { SCsans } { FandolHei-Regular.otf }
                  [
                    BoldFont       = FandolHei-Bold.otf ,
                    ItalicFont     = * ,
                    BoldItalicFont = FandolHei-Bold.otf ,
                  ]
              }
            \__colorclass_if_font_exist:nnn { SourceHanMonoSC-Regular }
              {
                \setCJKfamilyfont { SCmono } { SourceHanMonoSC-Regular }
                  [
                    BoldFont       = SourceHanMonoSC-Medium ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanMonoSC-Medium ,
                  ]
              }
              {
                \setCJKfamilyfont { SCmono } { FandolFang-Regular.otf }
                  [
                    BoldFont       = * ,
                    BoldFeatures   = { FakeBold = 4 } ,
                    ItalicFont     = * ,
                    BoldItalicFont = * ,
                    BoldItalicFeatures = { FakeBold = 4 } ,
                  ]
              }
          }

        \bool_if:NT \g__projlib_language_enabled_tchinese_bool
          {
            \__colorclass_if_font_exist:nnn { SourceHanSerifTC-Regular }
              {
                \setCJKfamilyfont { TCmain } { SourceHanSerifTC-Regular }
                  [
                    BoldFont       = SourceHanSerifTC-Bold ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanSerifTC-Bold ,
                  ]
              }
              {
                \setCJKfamilyfont { TCmain } { FandolSong-Regular.otf }
                  [
                    BoldFont       = FandolSong-Bold.otf ,
                    ItalicFont     = FandolKai-Regular.otf ,
                    BoldItalicFont = FandolKai-Regular.otf ,
                    BoldItalicFeatures = { FakeBold = 4 } ,
                  ]
              }
            \__colorclass_if_font_exist:nnn { SourceHanSansTC-Regular }
              {
                \setCJKfamilyfont { TCsans } { SourceHanSansTC-Regular }
                  [
                    BoldFont       = SourceHanSansTC-Bold ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanSansTC-Bold ,
                  ]
              }
              {
                \setCJKfamilyfont { TCsans } { FandolHei-Regular.otf }
                  [
                    BoldFont       = FandolHei-Bold.otf ,
                    ItalicFont     = * ,
                    BoldItalicFont = FandolHei-Bold.otf ,
                  ]
              }
            \__colorclass_if_font_exist:nnn { SourceHanMonoTC-Regular }
              {
                \setCJKfamilyfont { TCmono } { SourceHanMonoTC-Regular }
                  [
                    BoldFont       = SourceHanMonoTC-Medium ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanMonoTC-Medium ,
                  ]
              }
              {
                \setCJKfamilyfont { TCmono } { FandolFang-Regular.otf }
                  [
                    BoldFont       = * ,
                    BoldFeatures   = { FakeBold = 4 } ,
                    ItalicFont     = * ,
                    BoldItalicFont = * ,
                    BoldItalicFeatures = { FakeBold = 4 } ,
                  ]
              }
          }

        \bool_if:NT \g__projlib_language_enabled_japanese_bool
          {
            \__colorclass_if_font_exist:nnn { SourceHanSerif-Regular }
              {
                \setCJKfamilyfont { JPmain } { SourceHanSerif-Regular }
                  [
                    BoldFont       = SourceHanSerif-Bold ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanSerif-Bold ,
                  ]
              }
              {
                \setCJKfamilyfont { JPmain } { FandolSong-Regular.otf }
                  [
                    BoldFont       = FandolSong-Bold.otf ,
                    ItalicFont     = FandolKai-Regular.otf ,
                    BoldItalicFont = FandolKai-Regular.otf ,
                    BoldItalicFeatures = { FakeBold = 4 } ,
                  ]
              }
            \__colorclass_if_font_exist:nnn { SourceHanSans-Regular }
              {
                \setCJKfamilyfont { JPsans } { SourceHanSans-Regular }
                  [
                    BoldFont       = SourceHanSans-Bold ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanSans-Bold ,
                  ]
              }
              {
                \setCJKfamilyfont { JPsans } { FandolHei-Regular.otf }
                  [
                    BoldFont       = FandolHei-Bold.otf ,
                    ItalicFont     = * ,
                    BoldItalicFont = FandolHei-Bold.otf ,
                  ]
              }
            \__colorclass_if_font_exist:nnn { SourceHanMono-Regular }
              {
                \setCJKfamilyfont { JPmono } { SourceHanMono-Regular }
                  [
                    BoldFont       = SourceHanMono-Medium ,
                    ItalicFont     = * ,
                    BoldItalicFont = SourceHanMono-Medium ,
                  ]
              }
              {
                \setCJKfamilyfont { JPmono } { FandolFang-Regular.otf }
                  [
                    BoldFont       = * ,
                    BoldFeatures   = { FakeBold = 4 } ,
                    ItalicFont     = * ,
                    BoldItalicFont = * ,
                    BoldItalicFeatures = { FakeBold = 4 } ,
                  ]
              }
          }

        \cs_new:Nn \colorclass_cjk_sffamily: {}
        \cs_new:Nn \colorclass_cjk_ttfamily: {}

        \hook_gput_code:nnn { cmd/sffamily/after } { colorclass } { \colorclass_cjk_sffamily: }
        \hook_gput_code:nnn { cmd/ttfamily/after } { colorclass } { \colorclass_cjk_ttfamily: }

        \AddLanguageSetting [schinese]
          {
            \cs_set:Nn \colorclass_cjk_sffamily: { \CJKfamily { SCsans } }
            \cs_set:Nn \colorclass_cjk_ttfamily: { \CJKfamily { SCmono } }
            \CJKfamily { SCmain }
          }
        \AddLanguageSetting [tchinese]
          {
            \cs_set:Nn \colorclass_cjk_sffamily: { \CJKfamily { TCsans } }
            \cs_set:Nn \colorclass_cjk_ttfamily: { \CJKfamily { TCmono } }
            \CJKfamily { TCmain }
          }
        \AddLanguageSetting [japanese]
          {
            \cs_set:Nn \colorclass_cjk_sffamily: { \CJKfamily { JPsans } }
            \cs_set:Nn \colorclass_cjk_ttfamily: { \CJKfamily { JPmono } }
            \CJKfamily { JPmain }
          }
      }


    \__colorclass_load_file_or_config:Nnn \l__colorclass_load_custom_font_file_math_bool { \l__colorclass_custom_font_file_math_str }
      {
        \bool_if:NF \g_projlib_font_already_set_bool
          {
            \bool_if:NTF \l__colorclass_fast_bool
              {
                \RequirePackage { amssymb }
              }
              {
                \PassOptionsToPackage { warnings-off = { mathtools-colon, mathtools-overbracket } } { unicode-math }
                \RequirePackage { unicode-math }
                \unimathsetup { math-style = ISO, partial = upright, nabla = upright }
                \setmathfont { Asana-Math.otf }
                \__colorclass_if_font_exist:nnn { Neo~Euler }
                  {
                    \setmathfont { Neo~Euler }
                      [
                        range             = { up / { Latin, latin, Greek, greek },
                                              bfup / { Latin, latin, Greek, greek },
                                              cal, bfcal, frak, bffrak,
                                              `(, `), `[, `], `\{, `\}, `:, `=, \ne, \equiv, `/, \backslash,
                                              \in, \notin, \ni, \subset, \supset, \subseteq, \supseteq,
                                              \rightarrow, \leftarrow, \leftrightarrow,
                                              \longleftarrow, \longrightarrow, \longleftrightarrow,
                                              \Leftarrow, \Rightarrow, \Leftrightarrow,
                                              \Longleftarrow, \Longrightarrow, \Longleftrightarrow,
                                              \nrightarrow, \nleftarrow, \nleftrightarrow,
                                              \nLeftarrow, \nRightarrow, \nLeftrightarrow,
                                              \mapsto, \hookrightarrow, \hookleftarrow,
                                              \leftharpoonup, \rightharpoonup, \leftharpoondown, \rightharpoondown,
                                              \rightleftharpoons, \leftrightharpoons,
                                              \sum, \prod, \coprod,
                                              \sqrt, \int, \iint, \iiint, \oint
                                            },
                        script-features   = {},
                        sscript-features  = {},
                        Scale             = 1.05,
                      ]
                  }{}
                \setmathfont { latinmodern-math.otf }
                  [
                    range = { \leq, \geq, \ll, \gg, \lll, \ggg, \leqslant, \geqslant },
                    Scale = 0.95,
                  ]
                \setmathfont { texgyrepagella-math.otf }
                  [
                    range = { up / num, bfup / num }
                  ]

                \hook_gput_code:nnn { begindocument } { colorclass }
                  {
                    \NewCommandCopy \colorclass_backup_mid: \mid
                    \RenewDocumentCommand \mid {}
                      { \skip_horizontal:n {-.15em} \colorclass_backup_mid: \skip_horizontal:n {-.15em} }
                    \NewCommandCopy \colorclass_backup_nmid: \nmid
                    \RenewDocumentCommand \nmid {}
                      { \skip_horizontal:n {-.15em} \colorclass_backup_nmid: \skip_horizontal:n {-.15em} }
                  }

                \RequirePackage { tikz-cd }

                \box_new:N \l__colorclass_xarrows_above_box
                \box_new:N \l__colorclass_xarrows_below_box
                \dim_new:N \l__colorclass_xarrows_length_dim
                \cs_new_protected:Nn \colorclass_xarrows_generic:nnnn
                  % #3 = option of \tikz
                  % #4 = edge of \draw
                  {
                    \hbox_set:Nn \l__colorclass_xarrows_below_box { \ensuremath { \scriptstyle #1 } }
                    \hbox_set:Nn \l__colorclass_xarrows_above_box { \ensuremath { \scriptstyle #2 } }
                    \dim_set:Nn \l__colorclass_xarrows_length_dim
                      { \dim_eval:n { \dim_max:nn { \box_wd:N \l__colorclass_xarrows_below_box } { \box_wd:N \l__colorclass_xarrows_above_box } + .8em } }
                    \mathrel
                      {
                        \tikz [ #3, baseline = -.55ex, every~node/.style = { inner~sep = 0pt } ]
                          \draw (0,0) #4
                            node [ below = 3pt ] { \box_use:N \l__colorclass_xarrows_below_box }
                            node [ above = 2pt ] { \box_use:N \l__colorclass_xarrows_above_box }
                            ( \l__colorclass_xarrows_length_dim ,0) ;
                      }
                  }

                \RenewDocumentCommand \xrightarrow { O{} m }
                  {
                    \colorclass_xarrows_generic:nnnn { #1 } { #2 } { -> } { -- }
                  }
                \RenewDocumentCommand \xleftarrow { O{} m }
                  {
                    \colorclass_xarrows_generic:nnnn { #1 } { #2 } { <- } { -- }
                  }
                \RenewDocumentCommand \xleftrightarrow { O{} m }
                  {
                    \colorclass_xarrows_generic:nnnn { #1 } { #2 } { <-> } { -- }
                  }
                \RenewDocumentCommand \xhookrightarrow { O{} m }
                  {
                    \colorclass_xarrows_generic:nnnn { #1 } { #2 } {} { edge [ commutative~diagrams/hookrightarrow ] }
                  }
                \RenewDocumentCommand \xhookleftarrow { O{} m }
                  {
                    \colorclass_xarrows_generic:nnnn { #1 } { #2 } {} { edge [ commutative~diagrams/hookleftarrow ] }
                  }
                \RenewDocumentCommand \xmapsto { O{} m }
                  {
                    \colorclass_xarrows_generic:nnnn { #1 } { #2 } {} { edge [ commutative~diagrams/mapsto ] }
                  }
                \NewDocumentCommand \xlongequal { O{} m }
                  {
                    \colorclass_xarrows_generic:nnnn { #1 } { #2 } {} { edge [ commutative~diagrams/equal ] }
                  }
                \hook_gput_code:nnn { begindocument/end } { colorclass }
                  {
                    \RenewDocumentCommand \twoheadrightarrow {}
                      {
                        \colorclass_xarrows_generic:nnnn { \,\, } {} {} { edge [ commutative~diagrams/twoheadrightarrow ] }
                      }
                    \RenewDocumentCommand \twoheadleftarrow {}
                      {
                        \colorclass_xarrows_generic:nnnn { \,\, } {} {} { edge [ commutative~diagrams/twoheadleftarrow ] }
                      }
                  }
              }
          }
      }
%</lebhart|beaulivre>
  }

\PassOptionsToPackage { all } { nowidow }
\RequirePackage { nowidow }
\RequirePackage { embrac }

%%================================
%%  Graphics
%%================================
\RequirePackage { graphicx }
\graphicspath { { images/ } }
\RequirePackage { wrapfig }
\RequirePackage { float }
\RequirePackage { caption }
\captionsetup { font = small }
%</class>
%
%
%<*colorist>
\keys_define:nn { colorist }
  {
    , draft             .bool_set:N         = \l__colorist_fast_bool
    , draft             .initial:n          = { false }
    , fast              .bool_set:N         = \l__colorist_fast_bool

    , style             .str_set:N          = \l__colorist_style_str
    , style             .initial:n          = { fancy }
    , fancy             .meta:n             = { style = fancy }

    , use-boldface      .bool_set:N         = \l__colorist_use_boldface_bool
    , use-boldface      .initial:n          = { false }
    , use~boldface      .bool_set:N         = \l__colorist_use_boldface_bool
    , use boldface      .bool_set:N         = \l__colorist_use_boldface_bool
    , usebf             .bool_set:N         = \l__colorist_use_boldface_bool
    , allow-boldface    .bool_set:N         = \l__colorist_use_boldface_bool
    , allow~boldface    .bool_set:N         = \l__colorist_use_boldface_bool
    , allow boldface    .bool_set:N         = \l__colorist_use_boldface_bool
    , allowbf           .bool_set:N         = \l__colorist_use_boldface_bool
    , runin             .bool_set:N         = \l__colorist_runin_bool
    , runin             .initial:n          = { false }

    , theorem-in-new-line .bool_set:N       = \l__colorist_theorem_in_new_line_bool
    , theorem-in-new-line .initial:n        = { false }
    , theorem~in~new~line .bool_set:N       = \l__colorist_theorem_in_new_line_bool
    , theorem in new line .bool_set:N       = \l__colorist_theorem_in_new_line_bool

    , unknown           .code:n             = {
                                                \PassOptionsToPackage { \CurrentOption } { projlib-language }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-author }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-datetime }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-draft }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-font }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-logo }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-math }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-paper }
                                                \PassOptionsToPackage { \CurrentOption } { projlib-theorem }
                                              }
  }
\ProcessKeysOptions { colorist }

\bool_new:N \l__colorist_is_book_bool
\cs_if_exist:cTF { c@chapter }
  {
    \bool_set_true:N \l__colorist_is_book_bool
  }
  {
    \bool_set_false:N \l__colorist_is_book_bool
  }

%%================================
%%  Paper configuration
%%================================
\RequirePackage { projlib-paper }

%%================================
%%  Multi-language support
%%================================
\RequirePackage { projlib-language }

%%================================
%%  Loading the style
%%================================
\exp_args:No \RequirePackage { colorist- \l__colorist_style_str }
%</colorist>
%
%<*style>
\@ifpackageloaded { colorist } {}
  {
    \msg_new:nnn { \@currname }
      { colorist-not-loaded }
      { "#1"~is~an~internal~style~of~"colorist".~To~use~it,~you~must~load~the~package~"colorist"~first. }
    \msg_warning:nnx { \@currname } { colorist-not-loaded } { \@currname }
    \endinput
  }

%%================================
%%  Title fonts
%%================================
\RequirePackage { anyfontsize }

\bool_if:NTF \l__colorist_use_boldface_bool
  {
    \cs_new:Nn \colorist_bfseries: { \bfseries \colorlet{colorist-temp-color}{.} \color{colorist-temp-color!90!paper} }
  }
  {
    \cs_new:Nn \colorist_bfseries: {}
  }

\tl_new:N \g_colorist_title_font_common_tl

\tl_new:N \g_colorist_title_font_part_tl
\tl_new:N \g_colorist_title_font_chapter_tl
\tl_new:N \g_colorist_title_font_section_tl
\tl_new:N \g_colorist_title_font_subsection_tl
\tl_new:N \g_colorist_title_font_subsubsection_tl
\tl_new:N \g_colorist_title_font_paragraph_tl

%<*colorist-fancy>
\tl_gset:Nn \g_colorist_title_font_common_tl        { \sffamily }
\tl_gset:Nn \g_colorist_title_font_part_tl          { \colorist_bfseries: \g_colorist_title_font_common_tl }
\tl_gset:Nn \g_colorist_title_font_chapter_tl       { \colorist_bfseries: \g_colorist_title_font_common_tl }
\tl_gset:Nn \g_colorist_title_font_section_tl       { \colorist_bfseries: \g_colorist_title_font_common_tl }
\tl_gset:Nn \g_colorist_title_font_subsection_tl    { \colorist_bfseries: \g_colorist_title_font_common_tl }
\tl_gset:Nn \g_colorist_title_font_subsubsection_tl { \colorist_bfseries: \g_colorist_title_font_common_tl }
\tl_gset:Nn \g_colorist_title_font_paragraph_tl     { \colorist_bfseries: \g_colorist_title_font_common_tl }
%</colorist-fancy>

%%================================
%% Color
%%================================
%<*colorist-fancy>
\definecolor{maintheme}{RGB}{70,130,180}
\definecolor{forestgreen}{RGB}{21,122,81}
\definecolor{lightorange}{RGB}{255,185,88}
%</colorist-fancy>

%%================================
%%  Footer
%%================================
\RequirePackage { geometry }
\RequirePackage { fancyhdr }
\RequirePackage { extramarks }

\hook_gput_code:nnn { begindocument/before } { colorist }
  {
    \fancyhfoffset { 0pt }
  }

\tl_new:N \l_colorist_leftmark_tl
\tl_new:N \l_colorist_rightmark_tl

\tl_set:Nn \l_colorist_leftmark_tl
  {
    \begin{minipage}[t]{.833\textwidth}
      \lastleftmark
    \end{minipage}
  }
\tl_set:Nn \l_colorist_rightmark_tl
  {
    \begin{minipage}[t]{.833\textwidth}
      \filleft
      \lastrightmark
    \end{minipage}
  }

\fancypagestyle { fancy }
  {
    \fancyhf{}
    \if@twoside
      \fancyfoot[RO]{\sffamily\textcolor{main-text!30!paper}{ \small \l_colorist_rightmark_tl }
        \rlap{\nobreakspace\nobreakspace\nobreakspace\nobreakspace\textcolor{main-text!75!paper}{\textbf{\thepage}}}}
      \fancyfoot[LE]{\leavevmode\sffamily\llap{\textcolor{main-text!75!paper}{\textbf{\thepage}}
        \nobreakspace\nobreakspace\nobreakspace\nobreakspace}
        \textcolor{main-text!30!paper}{ \l_colorist_leftmark_tl }}
    \else
      \fancyfoot[R]{\textcolor{main-text!30!paper}{ \l_colorist_rightmark_tl }
        \rlap{\nobreakspace\nobreakspace\nobreakspace\nobreakspace\textcolor{main-text!75!paper}{\textbf{\thepage}}}}
    \fi
    \renewcommand{\headrulewidth}{0pt}
  }
\pagestyle{fancy}

\fancypagestyle { plain }
  {
    \fancyhf{}
    \if@twoside
      \fancyfoot[RO]{\sffamily
        \nobreakspace\rlap{\nobreakspace\nobreakspace\nobreakspace\nobreakspace\textcolor{main-text!75!paper}{\textbf{\thepage}}}}
      \fancyfoot[LE]{\leavevmode\sffamily\llap{\textcolor{main-text!75!paper}{\textbf{\thepage}}
        \nobreakspace\nobreakspace}}
    \else
      \fancyfoot[R]{\sffamily
        \nobreakspace\nobreakspace\nobreakspace\rlap{\textcolor{main-text!75!paper}{\textbf{\thepage}}}}
    \fi
    \renewcommand{\headrulewidth}{0pt}
  }

\bool_if:NTF \l__colorist_is_book_bool
  {
    \if@twoside
        \renewcommand{\chaptermark}[1]{\markboth{\textsc{#1}}{}}
    \else
        \renewcommand{\chaptermark}[1]{\markboth{\textsc{#1}}{\textsc{#1}}}
    \fi
    \renewcommand*{\sectionmark}[1]{
      \markright{\thesection\nobreakspace\nobreakspace#1}}
  }
  {
    \if@twoside
        \renewcommand*{\sectionmark}[1]{\markboth{\textsc{#1}}{}}
    \else
        \renewcommand*{\sectionmark}[1]{\markboth{\textsc{#1}}{\textsc{#1}}}
    \fi
  }

%%================================
%%  Title format
%%================================
\RequirePackage [ explicit, newparttoc ] { titlesec }
\PassOptionsToPackage { normalem } { ulem }
\RequirePackage { ulem }

\PassOptionsToPackage { many } { tcolorbox }
\RequirePackage { tcolorbox }
\bool_if:NT \l__colorist_fast_bool { \tcbstartdraftmode }

\newcommand{\partstring}{\MakeUppercase{{\partname\nobreakspace\protect\thepart}}}

\AddLanguageSetting
  {
    \renewcommand{\partstring}{\MakeUppercase{{\partname\nobreakspace\protect\thepart}}}
  }
\AddLanguageSetting [ schinese ]
  {
    \renewcommand{\partstring}{第 \nobreakspace\thepart\nobreakspace 部分}
  }
\AddLanguageSetting [ tchinese ]
  {
    \renewcommand{\partstring}{第 \nobreakspace\thepart\nobreakspace 部分}
  }
\AddLanguageSetting [ japanese ]
  {
    \renewcommand{\partstring}{第 \nobreakspace\thepart\nobreakspace 部}
  }

\bool_if:NTF \l__colorist_is_book_bool
  {
    \setcounter{secnumdepth}{3}

    %% Part
    \titleclass{\part}{top} % make part like a chapter
    \titleformat{\part}[display]
      { \g_colorist_title_font_part_tl \filleft}
      {
        \thispagestyle{empty}
        \begin{tikzpicture}[remember~picture,overlay]
          \fill[maintheme!10!paper] (current~page.north~west) rectangle (current~page.south~east);
          \node at ($(current~page.north~west)+(15em,-15em)$) {\normalfont\textcolor{maintheme}{\scalebox{12}{\thepart}}};
        \end{tikzpicture}
      }
      {1em}
      {\fontsize{20}{0}\selectfont\MakeUppercase{#1}}
    \titleformat{name=\part,numberless}[display]
      {% \phantomsection\addcontentsline{toc}{part}{#1}%
         \g_colorist_title_font_part_tl \filleft}
      {
        \thispagestyle{empty}
        \begin{tikzpicture}[remember~picture,overlay]
          \fill[maintheme!10!paper] (current~page.north~west) rectangle (current~page.south~east);
          \node at ($(current~page.north~west)+(15em,-15em)$) {\normalfont\textcolor{maintheme}{\scalebox{12}{$*$}}};
        \end{tikzpicture}
      }
      {1em}
      {\fontsize{20}{0}\selectfont\MakeUppercase{#1}}
    \titlespacing*{\part}{0pt}{5em}{6em}
    %% Text after part
    \newcommand{\parttext}[1]{
        \vfill
        \begin{flushright}
            \begin{minipage}{0.833\textwidth}
                \color{main-text!80!paper}\raggedleft#1
            \end{minipage}
        \end{flushright}
        \vfill\vfill
        \cleardoublepage
    }

    %% Chapter
    % Numbered chapter title: \TheChapter{<number>}{<title>}
    \newcommand{\TheChapter}[2]
      {
        \tcbsidebyside[enhanced,sidebyside~adapt=right,sidebyside~align=bottom,
        colback=paper,frame~hidden,
        segmentation~code={
            \filldraw[maintheme] (segmentation.north)
                -- ($(segmentation.east)-(12pt,0)$)
                -- ($(segmentation.west)+(12pt,0)$)
                -- (segmentation.south);}
        ]{\filleft#2}{\normalfont\textcolor{maintheme}{\scalebox{4}{#1}}}
      }
    % Numberless chapter title: \TheChapterSingle{<title>}
    \newcommand{\TheChapterSingle}[1]
      {
        \begin{tcolorbox}[
            enhanced,
            width = 0.67\textwidth,
            colback=paper,frame~hidden,
            halign=center]
            #1
            \vspace{-.6em}
            \begin{center}
                \begin{tikzpicture}
                    \filldraw[maintheme] (-4em,0) -- (4em,0) -- (0,-.1em) -- (0,.1em);
                \end{tikzpicture}
            \end{center}
        \end{tcolorbox}
      }
    
    \titleformat{name=\chapter}
      { \g_colorist_title_font_chapter_tl \scshape\huge} % Format
      {} % Label
      {0mm} % Sep
      {\TheChapter{\thechapter}{#1}} % Before-code
    \titlespacing*{name=\chapter}
      {0em}{*2}{0em} % {left}{before-sep}{after-sep}

    \titleformat{name=\chapter, numberless}
      {\filcenter \g_colorist_title_font_chapter_tl \scshape\huge}
      {}
      {0mm}
      {\TheChapterSingle{#1}}
    \titlespacing*{name=\chapter, numberless}
      {0em}{*2}{0em}

    %% Section
    \titleformat{\section}
      {\color{maintheme} \g_colorist_title_font_section_tl \large}
      {\thesection}{.75em}{#1}

    %% Subsection
    \titleformat{\subsection}
      { \g_colorist_title_font_subsection_tl }{\thesubsection}{.75em}
      {#1}
  }
  {
    %% Part
    \titleformat{\part}[display]
      { \g_colorist_title_font_part_tl \filleft}
      {\partstring}
      {.3em}
      {\fontsize{16}{0}\selectfont\MakeUppercase{#1}}
    \titleformat{name=\part,numberless}[display]
      {% \phantomsection\addcontentsline{toc}{part}{#1}
         \g_colorist_title_font_part_tl \filleft}
      {\phantom{\MakeUppercase{\partname}}}
      {.3em}
      {\fontsize{16}{0}\selectfont\MakeUppercase{#1}}
    %% Text after part
    \newcommand{\parttext}[1]
      {
        \begin{flushright}
            \begin{minipage}{0.833\textwidth}
                \color{main-text!80!paper}\raggedleft#1
            \end{minipage}
        \end{flushright}
      }

    %% Section
    \titleformat{\section}
      {\color{maintheme} \g_colorist_title_font_section_tl \large}
      {\thesection}{.75em}{\scshape #1}

    %% Subsection
    \titleformat{\subsection}
      { \g_colorist_title_font_subsection_tl }{\thesubsection}{.75em}
      {#1}
  }

%% Subsubsection
%<*colorist-fancy>
\bool_if:NTF \l__colorist_runin_bool
  {
    \titleformat{\subsubsection}[runin]
      {\color{main-text!70!paper} \g_colorist_title_font_subsubsection_tl }
      {\thesubsubsection}
      {.5em}
      {#1.}
      [\hspace*{.3em}]
  }
  {
    \titleformat{\subsubsection}
      {\color{main-text!70!paper} \g_colorist_title_font_subsubsection_tl }
      {\thesubsubsection}
      {.5em}
      {#1}
  }
%</colorist-fancy>

%% Paragraph
\titleformat{\paragraph}[runin]
  { \g_colorist_title_font_paragraph_tl }{\theparagraph}{1em}{#1}

\titlespacing{\section}{0pt}{\baselineskip}{.6\baselineskip}
\titlespacing{\subsection}{0pt}{.75\baselineskip}{.4\baselineskip}
\titlespacing{\subsubsection}{0pt}{.5\baselineskip}{.3\baselineskip}

%%================================
%%  ToC format
%%================================
\RequirePackage { titletoc }
\titlecontents{part}
  [0em]
  {\addvspace{1.5pc}\large\filcenter\sffamily \colorist_bfseries: }
  {\textcolor{maintheme}{\bfseries\thecontentslabel}\nopagebreak\\\nopagebreak\uppercase}
  {}
  {} % without page number
  [\addvspace{.5pc}]

\bool_if:NTF \l__colorist_is_book_bool
  {
    \titlecontents{chapter}
      [2em] % i.e., 0em (part) + 2em
      {\addvspace{1pc}\normalfont\color{maintheme}\sffamily \colorist_bfseries: }
      {\contentslabel{2em}}
      {\scshape\hspace*{-2em}}
      {\titlerule*[10pt]{\parbox{2pt}{\hspace*{-.25pt}\textcolor{main-text!15!paper}{.}}}\color{maintheme}\contentspage}
    \titlecontents{section}
      [4em] % i.e., 2em (chapter) + 2em
      {\addvspace{.3pc}\normalfont\color{maintheme}\sffamily}
      {\contentslabel{1.75em}}
      {\hspace*{-1.75em}}
      {\titlerule*[10pt]{\parbox{2pt}{\textcolor{main-text!15!paper}{.}}}\color{maintheme}\contentspage}
    \titlecontents{subsection}
      [7em] % i.e., 4em (section) + 3em
      {\addvspace{.15pc}\normalfont\sffamily}
      {\contentslabel{2.75em}}
      {\hspace*{-2.75em}}
      {\titlerule*[10pt]{\parbox{2pt}{\textcolor{main-text!15!paper}{.}}}\color{main-text!45!paper}\contentspage}
    \titlecontents{subsubsection}
      [10em] % i.e., 7em (subsection) + 3em
      {\normalfont\sffamily}
      {\contentslabel{3.25em}}
      {\hspace*{-3.25em}}
      {\titlerule*[10pt]{\parbox{2pt}{\textcolor{main-text!15!paper}{.}}}\color{main-text!45!paper}\contentspage}
  }
  {
    \titlecontents{section}
      [2em] % i.e., 0em (part) + 2em
      {\addvspace{.3pc}\normalfont\color{maintheme}\sffamily}
      {\contentslabel{1.75em}}
      {\hspace*{-1.75em}}
      {\titlerule*[10pt]{\parbox{2pt}{\textcolor{main-text!15!paper}{.}}}\color{maintheme}\contentspage}
    \titlecontents{subsection}
      [4.5em] % i.e., 2em (section) + 2.5em
      {\addvspace{.15pc}\normalfont\sffamily}
      {\contentslabel{2.15em}}
      {\hspace*{-2.15em}}
      {\titlerule*[10pt]{\parbox{2pt}{\textcolor{main-text!15!paper}{.}}}\color{main-text!45!paper}\contentspage}
    \titlecontents{subsubsection}
      [7.75em] % i.e., 5em (subsection) + 3.25em
      {\normalfont\sffamily}
      {\contentslabel{2.75em}}
      {\hspace*{-2.75em}}
      {\titlerule*[10pt]{\parbox{2pt}{\textcolor{main-text!15!paper}{.}}}\color{main-text!45!paper}\contentspage}
  }

%%================================
%%  Lists
%%================================
\RequirePackage { enumitem }
\setlist{noitemsep}
% \setlist{topsep = .1\baselineskip, parsep=0pt, itemsep=.05\baselineskip}
\setlist[enumerate]{labelsep=*, leftmargin=*}
\setlist[enumerate,1]{label=\arabic*$)$,
    ref = \arabic*$)$}
\setlist[enumerate,2]{label=\emph{\roman*}$)$,
    ref = \arabic{enumi}.\emph{\roman*}$)$}
\setlist[enumerate,3]{label=\emph{\alph*}$)$,
    ref = \arabic{enumi}.\emph{\roman{enumii}}.\emph{\alph*}$)$}
\setlist[description]{font=\normalfont\colorist_bfseries:}

\setlist[itemize]{leftmargin=*}
\AddLanguageSetting { \setlist[itemize,1]{label=\colorlet{currentcolor}{.}\textcolor{currentcolor!27!paper}{$\bullet$}} }
\AddLanguageSetting [french] { \setlist[itemize,1]{label=\colorlet{currentcolor}{.}\textcolor{currentcolor!55!paper}{---}} }
\setlist[itemize,2]{label=\colorlet{currentcolor}{.}\textcolor{currentcolor!27!paper}{--}}
\setlist[itemize,3]{label=\colorlet{currentcolor}{.}\textcolor{currentcolor!27!paper}{\texttt{*}}}

%%================================
%%  Blank page
%%================================
\newcommand{\blinkpagetext}{This~page~is~intentionally~left~blank}
\renewcommand{\cleardoublepage}{
  \relax
  \clearpage
  \if@twoside\ifodd\c@page\relax\else
  \thispagestyle{empty}
  \hook_gput_next_code:nn { shipout/background }
    {
      \put(0.5\paperwidth,-0.5\paperheight){
      \makebox[0pt]{\large\color{main-text!10!paper}\blinkpagetext}}
    }
  \null\newpage\fi\fi
}

%%================================
%%  Draft mark
%%================================
\RequirePackage { projlib-draft }


%%================================
%% Icons
%%================================
%# 小灯泡和问号图案
%# The ideabulb and questionmark icons
\RequirePackage{tikz}
\newcommand{\ideabulb}[2][0.15]
  {
    \scalebox{#1}{
    \begin{tikzpicture}
        \filldraw[draw=#2,fill=#2] (0,0) circle [radius=1cm];
        \filldraw[draw=paper,fill=paper,rounded~corners=0.8pt]
            [rotate=20] (-0.26,-0.66) rectangle (-0.06,-0.6)
            [xshift=-0.4mm,yshift=1mm] (-0.26,-0.66) rectangle (0.02,-0.6)
            [xshift=0.4mm,yshift=1mm] (-0.26,-0.66) rectangle (-0.06,-0.6);
        \draw[draw=paper,line~width=0.7mm] (-0.18,-0.46)
            .. controls (-0.18,-0.28) and (-0.28,-0.12) ..(-0.4,0.1)
            .. controls (-0.55,0.4) and (-0.3,0.64) ..(0,0.64)
            .. controls (0.3,0.64) and (0.55,0.4) ..(0.4,0.1)
            .. controls (0.28,-0.12) and (0.18,-0.28) ..(0.18,-0.46);
    \end{tikzpicture}}
  }

\newcommand{\questionmark}[2][0.15]
  {
    \scalebox{#1}{
    \begin{tikzpicture}
        \filldraw[draw=#2,fill=#2] (0,0) circle [radius=1cm];
        \filldraw[paper,yshift=0.5mm,scale=0.9] (-0.4,0.1) circle [radius=0.77mm];
        \draw[draw=paper,line~width=1.5mm,yshift=0.5mm,scale=0.9] (-0.4,0.1)
            .. controls (-0.55,0.4) and (-0.3,0.64) ..(0,0.64)
            .. controls (0.3,0.64) and (0.55,0.4) ..(0.4,0.1)
            .. controls (0.28,-0.12) and (0.05,-0.28) ..(0.05,-0.3)
            .. controls (0,-0.36) and (0.0,-0.45) ..(0.0,-0.5);
        \fill[fill=paper,rounded~corners=0.6mm]
            (-0.09,-0.75) rectangle (0.09,-0.53);
    \end{tikzpicture}}
  }

%%================================
%%  Theorems
%%================================
\RequirePackage { mathtools }
\RequirePackage { amsthm }

\bool_if:NTF \l__colorist_theorem_in_new_line_bool
  {
    \newtheoremstyle{simple}
      {}{}
      {\normalfont}{}
      {\normalfont}{}
      {\newline}
      {{\thmname{#1}\nobreakspace\thmnumber{#2}}
        {\color{main-text!50!paper}\thmnote{\hspace{.4em}\ensuremath{(\text{#3})}}}\smallskip}
  }
  {
    \newtheoremstyle{simple}
      {}{}
      {\normalfont}{}
      {\normalfont}{}
      {0pt}
      {{\thmname{#1}\nobreakspace\thmnumber{#2}}
        {\color{main-text!50!paper}\thmnote{\hspace{.4em}\ensuremath{(\text{#3})}}}\nobreakspace\nobreakspace{\normalfont\textcolor{main-text!27!paper}{---}}\nobreakspace\nobreakspace}
  }

\renewcommand{\qedsymbol}{
  \makebox[1em]{\color{main-text!27!paper}\rule[-0.1em]{.95em}{.95em}}}
\let\qedsymbolOriginal\qedsymbol

% The style of the theorem-like environment that will be wrapped into the color box
\newtheoremstyle{basic}
    {0pt}{0pt}{\normalfont}{0pt}
    {}{\;}{0.25em}
    {{\thmname{#1}~\thmnumber{\textup{#2}}}
    \thmnote{\normalfont\sffamily\color{main-text}~(#3)}}

% The style of remark-like environments
\newtheoremstyle{emphasis}
    {0pt}{0pt}{\itshape}{0pt}{}{}{0pt}
    {\thmnote{\normalfont\sffamily\color{main-text}#3\hspace*{0.5em}}}

% Custom proof style
\renewenvironment{proof}[1][\proofname]{\par
  \pushQED{\qed}
  \normalfont \topsep6\p@\@plus6\p@\relax
  \trivlist
  \item[\hskip\labelsep
        \itshape
    #1\hspace{.4em}
    \textcolor{main-text!27!paper}{$|$}]\ignorespaces
}{%
  \popQED\endtrivlist\@endpefalse
}

\bool_if:NTF \l__colorist_fast_bool
  {
    \providecommand{\phantomsection}{}
    \RequirePackage { url }
    \newcommand{\href}[2]{#2}
  }
  {
    \PassOptionsToPackage { hidelinks,linktoc=all } { hyperref }
    \RequirePackage { bookmark }
    \RequirePackage { hyperref }
  }

% \PassOptionsToPackage { simplename } { projlib-theorem }
\RequirePackage { projlib-theorem }

\exp_args:No \SetTheorem { \c_projlib_theorem_supported_clist }
  {
    name style = {
      , heading style = {
          , english = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
          , french = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
          , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
          , italian = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
          , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
          , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
          , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
          , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
          , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
          , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
          , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
        }
    }
  }

\SetTheorem { remark }
  {
    name style = {
      , heading style = {
          , english = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , french = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , italian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , russian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
          , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
          , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
          , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
          , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
        }
    }
  }

\bool_if:NF \l__projlib_theorem_complexname_bool
  {
    \exp_args:No \SetTheorem { \c_projlib_theorem_supported_clist }
      {
        name style = {
          , crefname style = {
              , english = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , french = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , italian = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
            }
          , Crefname style = {
              , english = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , french = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , italian = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl\textsc
              , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
            }
          , numbering style = {
              , english = \colorist_bfseries:\g_colorist_title_font_common_tl
              , french = \colorist_bfseries:\g_colorist_title_font_common_tl
              , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl
              , italian = \colorist_bfseries:\g_colorist_title_font_common_tl
              , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl
              , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl
              , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
            }
        }
      }

    \SetTheorem { remark }
      {
        name style = {
          , crefname style = {
              , english = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , french = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , italian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
            }
          , Crefname style = {
              , english = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , french = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , italian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl\textit
              , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
            }
          , numbering style = {
              , english = \colorist_bfseries:\g_colorist_title_font_common_tl
              , french = \colorist_bfseries:\g_colorist_title_font_common_tl
              , ngerman = \colorist_bfseries:\g_colorist_title_font_common_tl
              , italian = \colorist_bfseries:\g_colorist_title_font_common_tl
              , portuguese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , brazilian = \colorist_bfseries:\g_colorist_title_font_common_tl
              , spanish = \colorist_bfseries:\g_colorist_title_font_common_tl
              , schinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , tchinese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , japanese = \colorist_bfseries:\g_colorist_title_font_common_tl
              , russian = \colorist_bfseries:\g_colorist_title_font_common_tl
            }
        }
      }
  }


\cs_new_protected:Nn \colorist_add_colorbox:nn
  % #1 = list of environments
  % #2 = settings of tcolorbox
  {
    \clist_map_inline:nn { #1 }
      {
        \__colorist_add_colorbox_do:nn { ##1 } { #2 }
        \__colorist_add_colorbox_do:nn { ##1* } { #2 }
      }
  }
\cs_new_protected:Nn \__colorist_add_colorbox_do:nn
  % #1 = name of environment
  % #2 = settings of tcolorbox
  {
    \tcolorboxenvironment { #1 } { #2 }
  }

\colorist_add_colorbox:nn { theorem, lemma, proposition, corollary, property, axiom, definition-proposition, definition-theorem }
  {
    enhanced~jigsaw, pad~at~break*=1mm, breakable, lines~before~break=3,
    left=3.5mm, right=3.5mm,
    colback=main-text!3!paper,
    opacityframe=0.9, colframe=orange, arc=.7mm
  }

\colorist_add_colorbox:nn { definition, assumption, convention, hypothesis, notation }
  {
    enhanced~jigsaw, pad~at~break*=1mm, breakable, lines~before~break=3,
    left=4mm, right=4mm, top=1mm, bottom=1mm,
    colback=lightorange!10!paper, boxrule=0pt, frame~hidden,
    borderline~west={1.5mm}{0mm}{forestgreen}, arc=.7mm
  }

\colorist_add_colorbox:nn { fact, example }
  {
    enhanced~jigsaw, pad~at~break*=1mm, breakable, lines~before~break=3,
    colback=main-text!5!paper,
    boxrule=0pt, frame~hidden, arc=.7mm
  }

\colorist_add_colorbox:nn { conjecture }
  {
    enhanced~jigsaw, pad~at~break*=1mm, breakable, lines~before~break=3,
    left=3.5mm, right=3.5mm,
    colback=main-text!3!paper,
    opacityframe=0.7, colframe=purple, arc=.7mm
  }

\colorist_add_colorbox:nn { problem }
  {
    enhanced~jigsaw, pad~at~break*=1mm, breakable, lines~before~break=3,
    colback=yellow!25!paper,
    boxrule=0pt, frame~hidden, arc=.7mm
  }

\colorist_add_colorbox:nn { question, exercise, remark, observation }
  {
    enhanced~jigsaw, pad~at~break*=1mm, breakable, lines~before~break=3,
    oversize,
    top=0mm, bottom=0mm,
    opacityframe=0, opacityback=0
  }

% Connect adjacent definition-like environments
% From https://tex.stackexchange.com/a/587023
\NewDocumentCommand \AfterEnvEnd { +m }
  { \colorist_after_env_end:nw { #1 } }
\cs_new_protected:Npn \colorist_after_env_end:nw #1 #2
       \if@ignore\@ignorefalse\ignorespaces\fi
  { #2 \if@ignore\@ignorefalse\ignorespaces\fi #1 }
\NewDocumentCommand \ScanEnv { s m +m +m }
  {
    \IfBooleanTF { #1 }
      { \colorist_scan_env_ignore_par:nTF }
      { \colorist_scan_env:nTF }
      { #2 } { #3 } { #4 }
  }
\cs_new_protected:Npn \colorist_scan_env:nTF
  { \__colorist_scan_env:NnTF \c_false_bool }
\cs_new_protected:Npn \colorist_scan_env_ignore_par:nTF
  { \__colorist_scan_env:NnTF \c_true_bool }
\tl_new:N \l__colorist_collected_tl
\cs_new_protected:Npn \__colorist_scan_env:NnTF #1 #2 #3 #4
  {
    \tl_clear:N \l__colorist_collected_tl
    \peek_analysis_map_inline:n
      {
        \tl_put_right:Nn \l__colorist_collected_tl { ##1 }
        \int_compare:nNnTF { "##3 } = { 0 }
          {
            \exp_args:No \token_if_eq_meaning:NNTF { ##1 } \begin
              { \peek_analysis_map_break:n { \__colorist_chk_env:nTFn { #2 } { #3 } { #4 } } }
              {
                \bool_lazy_and:nnF { #1 }
                    { \exp_args:No \token_if_eq_meaning_p:NN { ##1 } \par }
                  { \__colorist_scan_env_end:n { #4 } }
              }
          }
          { \int_compare:nNnF { "##3 } = { 10 } { \__colorist_scan_env_end:n { #4 } } }
      }
  }
\cs_new_protected:Npn \__colorist_scan_env_end:n #1
  { \peek_analysis_map_break:n { \__colorist_reinsert_tokens:nn { #1 } { } } }
\cs_new_protected:Npn \__colorist_reinsert_tokens:nn #1 #2
  {
    \use:x
      {
        \tl_clear:N \exp_not:N \l__colorist_collected_tl
        \exp_not:n { #1 } \l__colorist_collected_tl #2
      }
  }
\cs_new_protected:Npn \__colorist_chk_env:nTFn #1 #2 #3 #4
  {
    \exp_args:Nx \__colorist_reinsert_tokens:nn
      { \str_if_eq:nnTF { #1 } { #4 } { \exp_not:n { #2 } } { \exp_not:n { #3 } } } { { #4 } }
  }

\cs_new_protected:Nn \colorist_add_scan_env:n
  {
    \clist_map_inline:nn { #1 }
      {
        \__colorist_add_scan_env_do:n { ##1 }
      }
  }
\cs_new_protected:Nn \__colorist_add_scan_env_do:n
  {
    \tl_const:cn { l__colorist_scan_env_ #1 }
      {
        \AfterEnvEnd
          {
            \ScanEnv* { #1 }
              { \skip_vertical:n { -0.55\baselineskip } }
              {
                \ScanEnv* { #1* }
                  { \skip_vertical:n { -0.55\baselineskip } }
                  {}
              }
          }
      }
    \hook_gput_code:nnn { env/#1/end } { colorist } { \tl_use:c { l__colorist_scan_env_ #1 } }
    \hook_gput_code:nnn { env/#1*/end } { colorist } { \tl_use:c { l__colorist_scan_env_ #1 } }
  }

\colorist_add_scan_env:n { definition, assumption, convention, hypothesis, notation }

\theoremstyle{simple}


\bool_if:NF \l__colorist_is_book_bool {

%%================================
%%  Title block style
%%================================
%<*colorist-fancy>
\renewcommand{\@maketitle}{
\begin{center}
    \color{maintheme}
    {\Large\sffamily\scshape \colorist_bfseries: \@title}\\\bigskip
    \color{main-text!80!paper}
    {\scshape\@author}\par\smallskip
    {\@date}
\end{center}
\ifx\@date\@empty\bigskip\fi
\medskip
}
%</colorist-fancy>

\hook_gput_code:nnn { cmd/maketitle/after } { colorist } { \thispagestyle{fancy} }

%%================================
%%  Abstract style
%%================================
%<*colorist-fancy>
\renewenvironment{abstract}
{\small{\centerline{\textsc{ \colorist_bfseries: \sffamily\abstractname}}\vspace{-0.3\baselineskip}}
    \color{main-text!80!paper}\begin{quotation}}
{\end{quotation}\medskip}
%</colorist-fancy>

%%================================
%%  Keyword environment
%%================================
\DefineMultilingualText { \keywordname }
  {
    EN = Keywords                               ,
    FR = Mots~clés                              ,
    DE = Schlüsselwörter                        ,
    IT = Parole~chiave                          ,
    PT = Palavras~chave                         ,
    BR = Palavras~chave                         ,
    ES = Palabras~clave                         ,
    CN = 关键词                                 ,
    TC = 關鍵詞                                 ,
    JP = キーワード                             ,
    RU = Ключевые~слова                         ,
  }

%<*colorist-fancy>
\newenvironment{keyword}
{\small\centerline{{ \colorist_bfseries: \keywordname}}\vspace{-0.3\baselineskip}
    \color{main-text!80!paper}\begin{center}}
{\end{center}\medskip}
%</colorist-fancy>

%%================================
%%  Simulate features of amsart
%%================================
\PassOptionsToPackage { amsfashion } { projlib-author }
\RequirePackage { projlib-author }

}
%</style>

\endinput